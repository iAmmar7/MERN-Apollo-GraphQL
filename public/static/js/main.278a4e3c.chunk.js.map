{"version":3,"sources":["components/Common/spinner.gif","components/Layout/Navbar.js","components/Layout/Landing.js","queries/Company.js","components/Common/TextField.js","components/Company/AddCompany.js","components/Common/SelectList.js","components/Common/Spinner.js","queries/Car.js","components/Car/AddCar.js","components/Car/EditCar.js","components/Car/CarCard.js","components/Car/Cars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","className","id","to","activeClassName","location","pathname","includes","Landing","GET_COMPANIES","gql","ADD_COMPANY","TextField","name","placeholder","value","error","info","type","onChange","disabled","AddCompany","useState","setName","setLocation","errors","setErrors","useMutation","addCompany","loading","onSubmit","e","preventDefault","trim","length","variables","refetchQueries","query","awaitRefetchQueries","then","res","console","log","history","push","catch","err","JSON","stringify","graphQLErrors","message","target","SelectList","selectOptions","options","map","option","key","label","src","spinner","style","width","margin","display","color","alt","ADD_CAR","EDIT_CAR","ALL_CARS","DELETE_CAR","AddCar","make","setMake","company","setCompany","allCompanies","useQuery","addCar","renderCompanies","Spinner","data","companies","arr","list","i","getDropdownList","limit","page","EditCar","state","car","editCar","carId","fetchUpdatedData","deleteCar","onClick","Cars","cars","setCars","totalCars","setTotalCars","setCurrentPage","useLazyQuery","getAllCars","useEffect","number","match","params","parseInt","paginatedCars","currentPage","renderPageNumbers","firstPageItem","lastPageItem","carData","changePage","carDeleted","updatedCars","filter","item","pageNumbers","lastPage","Math","ceil","client","ApolloClient","uri","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.278a4e3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ea3be1eb.gif\";","import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark navbar-expand\">\r\n      <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n        <ul className=\"navbar-nav ml-auto mr-auto\">\r\n          <li className=\"nav-item mr-3\">\r\n            <NavLink to=\"/add-company\" className=\"nav-link\" activeClassName=\"active\">\r\n              Add Company\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-3\">\r\n            <NavLink to=\"/add-car\" className=\"nav-link\" activeClassName=\"active\">\r\n              Add Car\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              to=\"/all-cars/1\"\r\n              className={\r\n                props.location.pathname.includes(\"/all-cars\") ? \"nav-link active\" : \"nav-link\"\r\n              }\r\n              activeClassName=\"active\">\r\n              All Cars\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default withRouter(Navbar);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div className=\"dark-overlay landing-inner\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 text-center\">\r\n            <h1 className=\"display-3 title\">PlanZ Challenge</h1>\r\n            <p className=\"lead\">\r\n              CRUD Application with Node, Express, MongoDB, Apollo Server, GraphQL, React, Apollo\r\n              Client\r\n            </p>\r\n            <hr />\r\n            <Link to=\"/all-cars/1\" className=\"btn btn-lg btn-primary py-2 px-4 mr-2\">\r\n              See all cars\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_COMPANIES = gql`\r\n  {\r\n    companies {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_COMPANY = gql`\r\n  mutation AddCompany($name: String!, $location: String!) {\r\n    addCompany(name: $name, location: $location) {\r\n      id\r\n      name\r\n      location\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nconst TextField = ({ name, placeholder, value, error, info, type, onChange, disabled }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input\r\n        type={type}\r\n        className={\r\n          error ? \"form-control form-control-lg is-invalid\" : \"form-control form-control-lg\"\r\n        }\r\n        placeholder={placeholder}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n      {info && <small className=\"form-text text-muted\">{info}</small>}\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nimport { ADD_COMPANY, GET_COMPANIES } from \"../../queries/Company\";\r\nimport TextField from \"../Common/TextField\";\r\n\r\nconst AddCompany = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [addCompany, { loading }] = useMutation(ADD_COMPANY);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setErrors({});\r\n\r\n    if (name.trim().length < 1) {\r\n      setErrors({ ...errors, name: \"Compnay name is required!\" });\r\n      return;\r\n    }\r\n    if (location.trim().length < 1) {\r\n      setErrors({ ...errors, location: \"Compnay location is required!\" });\r\n      return;\r\n    }\r\n\r\n    addCompany({\r\n      variables: { name: name, location: location },\r\n      refetchQueries: [{ query: GET_COMPANIES }],\r\n      awaitRefetchQueries: true,\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        props.history.push(\"/add-car\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(JSON.stringify(err));\r\n\r\n        if (err?.graphQLErrors[0]?.message) {\r\n          setErrors({ name: err?.graphQLErrors[0]?.message });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-2\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 m-auto\">\r\n          <h1 className=\"display-4 text-center title\">Add Company</h1>\r\n          <p className=\"lead text-center\">Let's add some info related to company!</p>\r\n          <form onSubmit={onSubmit}>\r\n            <TextField\r\n              placeholder=\"Company Name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={({ target: { value } }) => setName(value)}\r\n              error={errors.name}\r\n              info=\"A name of a company\"\r\n            />\r\n            <TextField\r\n              placeholder=\"Location\"\r\n              name=\"location\"\r\n              type=\"text\"\r\n              value={location}\r\n              onChange={({ target: { value } }) => setLocation(value)}\r\n              error={errors.location}\r\n              info=\"Location of a company\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              className=\"btn btn-dark btn-block mt-4\"\r\n              disabled={loading}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCompany;\r\n","import React from \"react\";\r\n\r\nconst SelectList = ({ name, value, error, info, onChange, options }) => {\r\n  const selectOptions = options.map((option) => (\r\n    <option key={option.label} value={option.value}>\r\n      {option.label}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <select\r\n        className={\r\n          error ? \"form-control form-control-lg is-invalid\" : \"form-control form-control-lg\"\r\n        }\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}>\r\n        {selectOptions}\r\n      </select>\r\n      {info && <small className=\"form-text text-muted\">{info}</small>}\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectList;\r\n","import React from \"react\";\r\nimport spinner from \"./spinner.gif\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={spinner}\r\n        style={{ width: \"100px\", margin: \"auto\", display: \"block\", color: \"red\" }}\r\n        alt=\"Loading...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const ADD_CAR = gql`\r\n  mutation AddCar($name: String!, $make: String!, $company: String!) {\r\n    addCar(name: $name, make: $make, company: $company) {\r\n      id\r\n      name\r\n      make\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EDIT_CAR = gql`\r\n  mutation EditCar($carId: String!, $name: String!, $make: String!, $company: String!) {\r\n    updateCar(carId: $carId, name: $name, make: $make, company: $company) {\r\n      id\r\n      name\r\n      make\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_CARS = gql`\r\n  query GetCars($limit: Int!, $page: Int!) {\r\n    paginatedCars(limit: $limit, page: $page) {\r\n      cars {\r\n        id\r\n        name\r\n        make\r\n        company {\r\n          id\r\n          name\r\n        }\r\n      }\r\n      totalCars\r\n      currentPage\r\n      perPage\r\n      totalPages\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_CAR = gql`\r\n  mutation DeleteCar($carId: String!) {\r\n    deleteCar(carId: $carId) {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nimport TextField from \"../Common/TextField\";\r\nimport SelectList from \"../Common/SelectList\";\r\nimport Spinner from \"../Common/Spinner\";\r\nimport { ADD_CAR, ALL_CARS } from \"../../queries/Car\";\r\nimport { GET_COMPANIES } from \"../../queries/Company\";\r\n\r\nconst AddCar = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [make, setMake] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const allCompanies = useQuery(GET_COMPANIES);\r\n\r\n  const [addCar, { loading }] = useMutation(ADD_CAR);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (name.trim().length < 1) {\r\n      setErrors({ name: \"Car name is required!\" });\r\n      return;\r\n    } else if (make.trim().length < 4 || make.trim().length > 4) {\r\n      setErrors({ make: \"Car making year must be 4 digit!\" });\r\n      return;\r\n    } else if (company.length === 0) {\r\n      setErrors({ company: \"Car making company is required!\" });\r\n      return;\r\n    } else {\r\n      setErrors({});\r\n    }\r\n\r\n    addCar({\r\n      variables: { name: name, make: make, company: company },\r\n      refetchQueries: [{ query: ALL_CARS, variables: { limit: 6, page: 1 } }],\r\n      awaitRefetchQueries: true,\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        props.history.push(\"/all-cars/1\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(JSON.stringify(err));\r\n      });\r\n  };\r\n\r\n  const getDropdownList = (arr) => {\r\n    var list = [{ label: \"* Choose...\", value: \"\" }];\r\n\r\n    if (arr.length > 0) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        list = [...list, { label: arr[i].name, value: arr[i].id }];\r\n      }\r\n    }\r\n    return list;\r\n  };\r\n\r\n  let renderCompanies = null;\r\n  if (allCompanies.loading) {\r\n    renderCompanies = <Spinner />;\r\n  } else if (allCompanies?.data?.companies?.length) {\r\n    renderCompanies = (\r\n      <SelectList\r\n        name=\"company\"\r\n        options={getDropdownList(allCompanies.data.companies)}\r\n        value={company}\r\n        onChange={({ target: { value } }) => setCompany(value)}\r\n        error={errors.company}\r\n        info=\"Select a company of this car\"\r\n      />\r\n    );\r\n  }\r\n\r\n  if (allCompanies?.data?.companies && !allCompanies?.data?.companies?.length > 0) {\r\n    return (\r\n      <div className=\"profiles mt-2\">\r\n        <div className=\"col-md-12\">\r\n          <h1 className=\"display-4 text-center title\">Cars</h1>\r\n          <p className=\"lead text-center\">See All Cars Here</p>\r\n          <div className=\"card-group justify-content-center\">\r\n            <Link to=\"/add-company\" className=\"btn btn-lg btn-primary\">\r\n              Please add a company first!\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-2\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 m-auto\">\r\n          <h1 className=\"display-4 text-center title\">Add Car</h1>\r\n          <p className=\"lead text-center\">Let's add some info related to car!</p>\r\n          <form onSubmit={onSubmit}>\r\n            <TextField\r\n              placeholder=\"Car Name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={({ target: { value } }) => setName(value)}\r\n              error={errors.name}\r\n              info=\"A name of a car\"\r\n            />\r\n            <TextField\r\n              placeholder=\"Car Make\"\r\n              name=\"make\"\r\n              type=\"number\"\r\n              value={make}\r\n              onChange={({ target: { value } }) => setMake(value)}\r\n              error={errors.make}\r\n              info=\"Making year of a car\"\r\n            />\r\n            {renderCompanies}\r\n            <button\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              className=\"btn btn-dark btn-block mt-4\"\r\n              disabled={loading || !allCompanies?.data?.companies?.length > 0}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCar;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nimport TextField from \"../Common/TextField\";\r\nimport SelectList from \"../Common/SelectList\";\r\nimport Spinner from \"../Common/Spinner\";\r\nimport { EDIT_CAR, ALL_CARS } from \"../../queries/Car\";\r\nimport { GET_COMPANIES } from \"../../queries/Company\";\r\n\r\nconst EditCar = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [make, setMake] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  if (props?.location?.state?.car) {\r\n    const {\r\n      location: {\r\n        state: { car },\r\n      },\r\n    } = props;\r\n\r\n    if (name === \"\") {\r\n      setName(car.name);\r\n    }\r\n    if (make === \"\") {\r\n      setMake(car.make);\r\n    }\r\n    if (company === \"\") {\r\n      setCompany(car.company.id);\r\n    }\r\n  }\r\n\r\n  const allCompanies = useQuery(GET_COMPANIES);\r\n  const [editCar, { loading }] = useMutation(EDIT_CAR);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (name.trim().length < 1) {\r\n      setErrors({ name: \"Car name is required!\" });\r\n      return;\r\n    } else if (make.trim().length < 4) {\r\n      setErrors({ make: \"Car making year must be 4 digit!\" });\r\n      return;\r\n    } else if (company.length === 0) {\r\n      setErrors({ company: \"Car making company is required!\" });\r\n      return;\r\n    } else {\r\n      setErrors({});\r\n    }\r\n\r\n    editCar({\r\n      variables: { carId: props.location.state.car.id, name: name, make: make, company: company },\r\n      refetchQueries: [{ query: ALL_CARS, variables: { limit: 6, page: 1 } }],\r\n      awaitRefetchQueries: true,\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        props.history.push(\"/all-cars/1\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(JSON.stringify(err));\r\n      });\r\n  };\r\n\r\n  const getDropdownList = (arr) => {\r\n    var list = [{ label: \"* Choose...\", value: \"\" }];\r\n\r\n    if (arr.length > 0) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        list = [...list, { label: arr[i].name, value: arr[i].id }];\r\n      }\r\n    }\r\n    return list;\r\n  };\r\n\r\n  let renderCompanies = null;\r\n  if (allCompanies?.data?.companies?.length > 0) {\r\n    renderCompanies = (\r\n      <SelectList\r\n        name=\"company\"\r\n        options={getDropdownList(allCompanies.data.companies)}\r\n        value={company}\r\n        onChange={({ target: { value } }) => setCompany(value)}\r\n        error={errors.company}\r\n        info=\"Select a company of this car\"\r\n      />\r\n    );\r\n  } else {\r\n    renderCompanies = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-2\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 m-auto\">\r\n          <h1 className=\"display-4 text-center title\">Edit Car</h1>\r\n          <p className=\"lead text-center\">Let's edit some info related to car!</p>\r\n          <form onSubmit={onSubmit}>\r\n            <TextField\r\n              placeholder=\"Car Name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={({ target: { value } }) => setName(value)}\r\n              error={errors.name}\r\n              info=\"A name of a car\"\r\n            />\r\n            <TextField\r\n              placeholder=\"Car Make\"\r\n              name=\"make\"\r\n              type=\"number\"\r\n              value={make}\r\n              onChange={({ target: { value } }) => setMake(value)}\r\n              error={errors.make}\r\n              info=\"Making year of a car\"\r\n            />\r\n            {renderCompanies}\r\n            <button\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              className=\"btn btn-dark btn-block mt-4\"\r\n              disabled={loading || !allCompanies?.data?.companies?.length > 0}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCar;\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nimport { DELETE_CAR, ALL_CARS } from \"../../queries/Car\";\r\n\r\nconst CarCard = ({ id, name, make, company, fetchUpdatedData, history }) => {\r\n  const [deleteCar, { loading }] = useMutation(DELETE_CAR);\r\n\r\n  const carDeleteHandler = () => {\r\n    deleteCar({\r\n      variables: { carId: id },\r\n      refetchQueries: [{ query: ALL_CARS, variables: { limit: 6, page: 1 } }],\r\n      awaitRefetchQueries: true,\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        // history.push(\"/all-cars/1\");\r\n        fetchUpdatedData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const carEditHandler = () => {\r\n    history.push({\r\n      pathname: `/edit-car/${id}`,\r\n      state: { car: { id, name, make, company } },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 card-width\">\r\n      <div className=\"card text-white bg-dark m-3 p-2 card-item\">\r\n        <div className=\"card-body text-center\">\r\n          <h5 className=\"card-title title\">{name}</h5>\r\n          <p className=\"card-text\">{make}</p>\r\n          <p className=\"card-text\">{company.name}</p>\r\n          <button className=\"btn btn-primary mr-2 px-3\" onClick={carEditHandler}>\r\n            Edit\r\n          </button>\r\n          <button className=\"btn btn-danger\" onClick={carDeleteHandler} disabled={loading}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(CarCard);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\n\r\nimport Spinner from \"../Common/Spinner\";\r\nimport CarCard from \"./CarCard\";\r\nimport { ALL_CARS } from \"../../queries/Car\";\r\n\r\nconst Cars = (props) => {\r\n  const [cars, setCars] = useState(null);\r\n  const [totalCars, setTotalCars] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(null);\r\n\r\n  const [getAllCars, { data }] = useLazyQuery(ALL_CARS);\r\n\r\n  function getData(number) {\r\n    getAllCars({\r\n      variables: { limit: 6, page: number },\r\n      refetchQueries: [{ query: ALL_CARS, variables: { limit: 6, page: number } }],\r\n      awaitRefetchQueries: true,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect run!\", [props.match.params.page]);\r\n    getData(parseInt(props.match.params.page));\r\n  }, [props.match.params.page]);\r\n\r\n  if (cars === null && data?.paginatedCars?.cars) {\r\n    setCars(data.paginatedCars.cars);\r\n    setTotalCars(data.paginatedCars.totalCars);\r\n    setCurrentPage(data.paginatedCars.currentPage);\r\n  }\r\n\r\n  const changePage = (number) => {\r\n    // setCurrentPage(number)\r\n    props.history.push(`/all-cars/${number}`);\r\n  };\r\n\r\n  const carDeleted = (car) => {\r\n    let updatedCars = cars.filter((item) => item.id !== car.deleteCar.id);\r\n\r\n    setCars(updatedCars);\r\n  };\r\n\r\n  const renderCars = (carData) => {\r\n    if (carData !== null && carData.length > 0) {\r\n      return (\r\n        <div className=\"card-group justify-content-center\">\r\n          {carData.map(({ id, name, make, company }) => (\r\n            <CarCard\r\n              key={id}\r\n              id={id}\r\n              name={name}\r\n              make={make}\r\n              company={company}\r\n              fetchUpdatedData={carDeleted}\r\n            />\r\n          ))}\r\n        </div>\r\n      );\r\n    } else if (carData !== null && carData.length === 0) {\r\n      return (\r\n        <div className=\"card-group justify-content-center\">\r\n          <Link to=\"/add-car\" className=\"btn btn-lg btn-primary\">\r\n            Please add some cars!\r\n          </Link>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Spinner />;\r\n    }\r\n  };\r\n\r\n  let renderPageNumbers, firstPageItem, lastPageItem;\r\n  const pageNumbers = [];\r\n\r\n  if (data?.paginatedCars?.cars) {\r\n    const lastPage = Math.ceil(totalCars / 6);\r\n\r\n    for (let i = 1; i <= Math.ceil(totalCars / 6); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    renderPageNumbers = pageNumbers.map((number) => {\r\n      return (\r\n        <li key={number} className=\"page-item\">\r\n          <button\r\n            className={\r\n              parseInt(props.match.params.page) === number\r\n                ? \"page-link btn bg-dark text-white\"\r\n                : \"page-link btn text-dark\"\r\n            }\r\n            onClick={() => changePage(number)}>\r\n            {number}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    firstPageItem = (\r\n      <li key={0} className=\"page-item\">\r\n        <button className=\"page-link btn text-dark\" onClick={() => changePage(1)}>\r\n          &laquo;\r\n        </button>\r\n      </li>\r\n    );\r\n\r\n    lastPageItem = (\r\n      <li key={lastPage + 1} className=\"page-item\">\r\n        <button className=\"page-link btn text-dark\" onClick={() => changePage(lastPage)}>\r\n          &raquo;\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"profiles mt-2\">\r\n      <div className=\"col-md-12\">\r\n        <h1 className=\"display-4 text-center title\">Cars</h1>\r\n        <p className=\"lead text-center\">See All Cars Here</p>\r\n        {renderCars(cars)}\r\n\r\n        {cars?.length > 0 ? (\r\n          <div className=\"card-group justify-content-center\">\r\n            <ul className=\"pagination-list\">\r\n              {firstPageItem}\r\n              {renderPageNumbers}\r\n              {lastPageItem}\r\n            </ul>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cars;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport Navbar from \"./components/Layout/Navbar\";\nimport Landing from \"./components/Layout/Landing\";\nimport AddCompany from \"./components/Company/AddCompany\";\nimport AddCar from \"./components/Car/AddCar\";\nimport EditCar from \"./components/Car/EditCar\";\nimport Cars from \"./components/Car/Cars\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/add-company\" component={AddCompany} />\n          <Route exact path=\"/add-car\" component={AddCar} />\n          <Route exact path=\"/edit-car/:id\" component={EditCar} />\n          <Route exact path=\"/all-cars/:page\" component={Cars} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}